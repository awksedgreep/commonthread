= CommonThread Framework

== Summary

CommonThread is a framework for building producer consumer threaded applications.  It strives to be the Rails for data processing and middleware.  It helps take the burden of statistics collection and management, logging, thread management, queue management, even loop processing, scheduling, and api creation to make application architecture and design much simpler.

Features:
* All data modeling and ORM uses ActiveRecord for database access, but you are not limited to that
* Scheduling is an enhanced version of ActiveSupport with lots of added functionality
* Statistics collection is built in and will track the number of items processed via producers and consumers, will give you live queue status, and overall health of the engine
* Thread management is built in, with easily definable number of threads for producers and consumers working a given queue, the ability to manage the application with intelligent shutdown, and kill capabilities
* Event loop specification via overloading and inheritance (sounds much more complex than it is, just specify what you would like the producer/consumer to do in a function definition)
* Built in logging with various error reporting levels from debug up through fatal
* Initial API creation will be XML-RPC, but SOAP and DRb will be added soon

== Installation

[sudo] gem install commonthread

== Framework creation

commonthread [application]

== Examples

Examples can be found in example directory of gem installation.  However, if you wish to create copies of the examples to demo you can do so with(not implemented yet):

commonthread example [application]

Where application is one of the following demo applications:
isp_oss_provisioning (big and complex example)
db_manager (simple as it gets, no queues, just scheduled tasks and a single controller)
snmp_poller (medium complexity, producers, consumers, and a queue with a single controller)

== To Do

* 0.2 Will implement web interface and be a fully functional library set/framework with existing limited goals
* 0.5 Will have improved packaging (tests created when generator called a la rails, a db option for storing classes) and crash proof persistent queues using ???(bdb?, pstore?, ???)
* 0.9 Preparation for 1.0, further improved packaging, standalone network queue startup script, either better XML-RPC support, or none at all . . . still haven't decided
* 1.0 Documentation, packaging, examples, community support ready for launch . . . NO NEW FEATURES, code freeze after 0.9

== Changes

* 0.1.12 Task thread manager for background thread tasks that don't fit the producer/consumer model
* 0.1.11 Tests for library classes completed
* 0.1.10 Added testing framework
* 0.1.9 Modified statistics collection for more intelligent responses
* 0.1.8 Fixed reporting error in Controller.stats and Controller.status
* 0.1.7 Queue undumped
* 0.1.6 Add DRb Server
* 0.1.5 Remove mysql gem dependency from logging
* 0.1.0 Initial Release

